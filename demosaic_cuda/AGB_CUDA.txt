agb_kernel = """
#include <stdlib.h>
#include <list>
using namespace std;
class Pixel 
{
public:
    int x, y;
 
    Pixel(int a, int b)
    {
        x = a;
        y= b;
    }
};


__device__ float get_pixel_value(float *im, int h,int w,Pixel l,Pixel r,Pixel t,Pixel b);

__device__ bool is_valid_pair(Pixel ind1,Pixel ind2,int h, intw);

__device__ bool is_valid_pixel(Pixel ind, int h, int w);

__device__ float average_of_valid_pixels(Pixel l, Pixel r,Pixel t,Pixel b,float *im,int h,int w);

__device__ float average_of_two(Pixel p1,Pixel p2, float *im, int h, int w);

 __global__ void nearn(float *out_r,float *out_g,float *out_b,float *in, const unsigned int h, unsigned int w)
 
 {
 int c = blockIdx.x*blockDim.x + threadIdx.x;
 int r = blockIdx.y*blockDim.y + threadIdx.y;
 
 if (c < w && r < h)
 {
 Pixel left_top(r-1,c-1);
 Pixel mid_top(r-1,c);
 Pixel right_top(r-1,c+1);
 
 Pixel left_mid(r,c-1);
 Pixel right_mid(r,c+1);
 Pixel bottom_left(r+1,c-1);
 Pixel bottom_mid(r+1,c);
 Pixel bottom_right(r+1,c+1);
 
 if (r%2 ==0)
 {
 if (c%2 ==0)
 {
 out_r[r*w+c] = in[r*w+c];
 out_g[r*w+c] = get_pixel_value(in,int h,int w, left_mid, right_mid, mid_top, bottom_mid);
 out_b[r*w+c] = get_pixel_value(in,int h,int w, left_top, bottom_right, bottom_left, right_top);
 }
 else
 {
 out_r[r*w+c] = average_of_two(left_mid, right_mid, in, h,w);
 out_g[r*w+c] = in[r*w+c];
 out_b[r*w+c] =average_of_two(mid_top, bottom_mid, in,h,w);

 }
 }
 else
 {
 if (c%2 ==0)
 {
 out_r[r*w+c] = average_of_two(mid_top, bottom_mid, in,h,w);
 out_g[r*w+c] = in[r*w+c];
 out_b[r*w+c] =average_of_two(left_mid, right_mid, in,h,w);
 
 }
 else
 {
 out_r[r*w+c] = get_pixel_value(in,int h,int w, left_top, bottom_right, bottom_left, right_top);
 out_g[r*w+c] = get_pixel_value(in,int h,int w, left_mid, right_mid, mid_top, bottom_mid);
 out_b[r*w+c] = in[r*w+c];
 }
 }
 }
 
 __device__ float get_pixel_value(float *im,int h,int w, Pixel l,Pixel r,Pixel t,Pixel b)
 {
 if (is_valid_pair(l, r, h,w) and is_valid_pair(t, b, h,w))
      float  top_pixel = im[t.y*w+t.x];
      float bottom_pixel = im[b.y*w+b.x];
      float left_pixel = im[l.y*w+l.x];
      float right_pixel = im[r.y*w+r.x];
        if (abs(top_pixel - bottom_pixel) > abs(left_pixel - right_pixel)):
            return ((left_pixel + right_pixel) / 2);
        else:
            return ((top_pixel + bottom_pixel) / 2);
    else: # At least one of the index pairs are out of bounds
        return average_of_valid_pixels(l, r, t, b, im, h,w);
 }
 
 __device__ bool is_valid_pair(Pixel ind1,Pixel ind2,int h, intw)
 {
 return is_valid_pixel(ind1,h,w) and is_valid_pixel(ind2,h,w);
 }
 

__device__ bool is_valid_pixel(Pixel ind, int h, int w)
{
if (ind.x < 0 or ind.x >= h or ind.y < 0 or ind.y >= h) 
{
     return False;
}
return True;
}

__device__ float average_of_valid_pixels(Pixel l, Pixel r,Pixel t,Pixel b,float *im, int h, int w)
{

int temp = 0;
int count = 0;
list<Pixel> pixels{l, r, t, b};

for (auto p = pixels.begin(); p !=pixels.end(); ++p)
{
if (!(*p.x < 0 or *p.x >= h or *p.y < 0 or *p.y >= w))
{
temp += im[(*p.y)*w + (*p.x)];
count +=1
}

}

return (temp/count);
}


__device__ float average_of_two(Pixel p1,Pixel p2, float *im, int h, int w)

{
if (is_valid_pair(p1, p2,h,w))
{
return ((im[(p1.y)*w + p1.x] + im[(p2.y)*w + p2.x])/2);
}
else if (is_valid_pixel(p1,h,w))
{
return im[p1.y*w + p1.x];
}
else
{
return im[p2.y*w + p2.x];
}
}

 
 }"""
