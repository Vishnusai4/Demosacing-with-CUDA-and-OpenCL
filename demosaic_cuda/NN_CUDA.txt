nn_kernel = """
     #include <string.h>
     #define RIGHT 0
     #define RIGHT_CORNER 1
     #define BOTTOM 2
   __device__ float closest_pixel( int r, int c, char region,float *im, int h, int w); 
   __device__ bool is_out_of_bounds(int r, int c, int h,int w);
   
   __global__ void nearn(float *out_r,float *out_g,float *out_b,float *in, const unsigned int h, unsigned int w)
   {
   int c = blockIdx.x*blockDim.x + threadIdx.x;
   int r = blockIdx.y*blockDim.y + threadIdx.y;
   
   if (r < h && c < w)
   {
   if (r%2 == 0) // RED GREEN pattern row
   {
   if (c%2 ==0) // red pixel
   {
   out_r[r*w+c] = in[r*w+c];
   out_g[r*w+c] = closest_pixel(r,c,RIGHT,in,h,w);
   out_b[r*w+c] = closest_pixel(r,c,RIGHT_CORNER,in,h,w);
   }
   else // green pixel
   {
   out_r[r*w+c] = closest_pixel(r,c,RIGHT,in,h,w);
   out_g[r*w+c] = in[r*w+c];
   out_b[r*w+c] = closest_pixel(r,c,BOTTOM,in,h,w);
   }
   }
   else //GREEN BLUE PATTERN
   {
   if (c%2 ==0) // green green
   {
   out_r[r*w+c] = closest_pixel(r,c,BOTTOM,in,h,w);
   out_g[r*w+c] = in[r*w+c];
   out_b[r*w+c] = closest_pixel(r,c,RIGHT,in,h,w);
   }
   else //blue pixel
   {
   out_r[r*w+c] = closest_pixel(r,c,RIGHT_CORNER,in,h,w);
   out_g[r*w+c] = closest_pixel(r,c,RIGHT,in,h,w);
   out_b[r*w+c] = in[r*w+c];
   }
   }
   }
   }
   
   __device__ float closest_pixel(int r, int c, char region,float *im, int h, int w)
   {
   if (region == RIGHT)
   {
   if (is_out_of_bounds(r,c+1,h,w))
   {
   return im[r*w + (c-1)];
   }
   else
   {
   return im[r*w + (c+1)];
   }
   }
   
   else if (region == RIGHT_CORNER)
   {
   if (is_out_of_bounds(r+1,c+1,h,w))
   {
   return im[(r-1)*w + (c-1)];
   }
   else
   {
   return im[(r+1)*w + (c+1)];
   }
   }
   else
   {
   if (is_out_of_bounds(r+1,c,h,w))
   {
   return im[(r-1)*w + c];
   }
   else
   {
   return im[(r+1)*w + c];
   }
   }
   }
   
   
   __device__ bool is_out_of_bounds(int r, int c, int h,int w)
   {
   return (r<0 || r>=h || c < 0 || c>=w);
   
   }"""
   
   
